plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    // jacoco
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // aws
    implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.0.0'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.0'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // prometheus grafana
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // elk es 8.11.1
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'com.github.danielwegener:logback-kafka-appender:0.2.0-RC2'

    // email service
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform() // JUnit5
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.9'
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        html.destination file('build/reports/testReport.html')
        finalizedBy 'jacocoTestCoverageVerification'
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/PureBasketBeApplication',
                    '**/security/*',
                    '**/*dto*',
                    '**/config/*'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '**.*PureBasketBeApplication*',
                    '**.*security*',
                    '**.*dto*',
                    '**.*config*',
            ]
        }

    }
}